graves = sum(enfermedad == "grave"),
sin_señales = sum(enfermedad == "sin"),
con_señales = sum(enfermedad == "con")
)
knitr::opts_chunk$set(echo = TRUE)
library(rio)
data=import("https://github.com/krlos20203563/ASIE_2024-1/raw/main/datos_abiertos_vigilancia_dengue.csv")
summary(data$edad)
str(data)
library(dplyr)
table(data$enfermedad)
data$enfermedad <- gsub("DENGUE CON SEÑALES DE ALARMA", "con", data$enfermedad)
data$enfermedad <- gsub("DENGUE SIN SEÑALES DE ALARMA", "sin", data$enfermedad)
data$enfermedad <- gsub("DENGUE GRAVE", "grave", data$enfermedad)
table(data$enfermedad)
data=filter(data, enfermedad=="con" | enfermedad=="sin" | enfermedad=="grave")
data$enfermedad=as.factor(data$enfermedad)
table(data$enfermedad)
summary(data$edad)
library(lsr)
EdadxYear = data |>
group_by(year) |>
summarise(media = mean(edad, na.rm=T))
EdadxYear
library(ggplot2)
library(ggthemes)
# Crear el gráfico de líneas
library(ggplot2)
ggplot(EdadxYear, aes(x = year, y = media)) +
geom_line(color = "blue", size = 1.5) +
geom_point(color = "red", size = 3) +
labs(title = "Edad promedio de personas contagiadas de dengue por año",
x = "Año",
y = "Edad") +
theme_economist() +
theme(legend.key.size = unit(1, "lines"),  # Tamaño de la leyenda
plot.title = element_text(size = 10))  # Tamaño del título
pregunta3 <- data %>%
group_by(year) %>%
summarise(
total_casos = n(),
graves = sum(enfermedad == "grave"),
sin_señales = sum(enfermedad == "sin"),
con_señales = sum(enfermedad == "con")
)
library(ggplot2)
library(ggthemes)
grafico_total <- ggplot(pregunta3, aes(x = year, y = total_casos)) +
geom_line(size=1) +
geom_point(color = "red", size = 3) +
labs(title = "Total de casos de Dengue a lo largo de los años",
x = "Año",
y = "Total de casos") +
theme_update()
grafico_con_alarma <- ggplot(pregunta3, aes(x = year, y = con_señales)) +
geom_line() +
geom_point(color = "red", size = 3) +
labs(title = "Casos de Dengue con Alarma a lo largo de los años",
x = "Año",
y = "Casos con Alarma") +
theme_stata()
grafico_sin_alarma <- ggplot(pregunta3, aes(x = year, y = sin_señales)) +
geom_line() +
geom_point(color = "red", size = 3) +
labs(title = "Casos de Dengue sin Alarma a lo largo de los años",
x = "Año",
y = "Casos sin Alarma") +
theme_test()
grafico_graves <- ggplot(pregunta3, aes(x = year, y = graves)) +
geom_line() +
geom_point(color = "red", size = 3) +
labs(title = "Casos de Dengue Grave a lo largo de los años",
x = "Año",
y = "Casos Graves") +
theme_minimal()
print(grafico_total)
print(grafico_con_alarma)
print(grafico_sin_alarma)
print(grafico_graves)
pregunta4 <- data %>%
group_by(departamento, provincia, year) %>%
summarize(
con_alarma = sum(enfermedad == "con"),
sin_alarma = sum(enfermedad == "sin"),
graves = sum(enfermedad == "graves")
)
# Mostrar los primeros registros de la base de datos resumida
head(pregunta4)
pregunta4 <- pregunta4 %>%
mutate(total_contagios = con_alarma + sin_alarma + graves)
head(pregunta4)
provyear <- pregunta4 %>%
group_by(departamento, provincia) %>%
summarise(total_historico = sum(total_contagios))
summary(provyear$total_historico)
provyear=filter(provyear, total_historico>3530)
library(ggplot2)
# Crear el gráfico de puntos
puntos <- ggplot(provyear, aes(x = departamento, y = total_historico, label = provincia)) +
geom_point(color = "red", size = 3) +
geom_text(size = 1.9, vjust = -0.5) +
labs(title = "Provincias con mayor número de casos de dengue",
x = "Departamentos", y = "Total de casos") +
theme_solarized() +
theme(plot.title = element_text(hjust = 0.5),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"),
axis.text.x = element_text(size = 4.5),
axis.text.y = element_text(size = 5),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10))
puntos
table(data$departamento)
pregunta5 <- data %>% filter_all(all_vars(. != "\\N"))
table(pregunta5$departamento)
pregunta5 <- pregunta5 %>%
group_by(departamento) %>%
summarise(
total_casos = n(),
graves = sum(enfermedad == "grave"),
sin_señales = sum(enfermedad == "sin"),
con_señales = sum(enfermedad == "con")
)
head(pregunta5)
pregunta5 <- pregunta5 %>%
mutate(relacion = con_señales/sin_señales)
head(pregunta5)
library(knitr)
library(heatmap3)
library(plotly)
# Preparar los datos para el heatmap
heatmap_data <- pregunta5 %>%
select(con_señales, sin_señales, relacion) %>%
as.matrix()
# Añadir nombres de fila
rownames(heatmap_data) <- pregunta5$departamento
# Crear el heatmap
heatmap(heatmap_data, Rowv = NA, Colv = NA, scale = "none",
main = "Casos de Dengue con y sin Síntomas por Región",
xlab = "Tipo de Caso", ylab = "Región",
col = heat.colors(256))
if (!require("devtools")) install.packages("devtools")
devtools::install_github("talgalili/d3heatmap")
library(d3heatmap)
d3heatmap(mtcars, scale = "column", colors = "Spectral")
d3heatmap(heatmap_data, scale = "column", colors="Spectral",)
View(heatmap_data)
library(d3heatmap)
d3heatmap(heatmap_data, scale = "column", colors="Spectral",)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(sf)
linkWorld_gpkg="https://github.com/SocialAnalytics-StrategicIntelligence/GeoDFBasics_py/raw/main/maps/worldMap.gpkg"
sf::st_layers(linkWorld_gpkg)
countries=read_sf(linkWorld_gpkg,layer="countryBorders")
rivers=read_sf(linkWorld_gpkg,layer="riverLines")
cities=read_sf(linkWorld_gpkg,layer="cityPoints")
library(ggplot2)
baseLayer=ggplot(data=countries)  + geom_sf(fill='grey90') + theme_light()
final=baseLayer + geom_sf(data=rivers, color='blue') + geom_sf(data=cities, color='red')
final
knitr::opts_chunk$set(echo = TRUE)
data=import("https://github.com/krlos20203563/ASIE_2024-1/raw/main/datos_abiertos_vigilancia_dengue.csv")
library(rio)
data=import("https://github.com/krlos20203563/ASIE_2024-1/raw/main/datos_abiertos_vigilancia_dengue.csv")
library(rio)
data=import("https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA1/datos_abiertos_vigilancia_dengue.csv")
setwd("C:/Users/Carlos Daniel/Documents/2024-1/ASIE/ASIE_2024-1")
library(rio)
library(dplyr)
library(sf)
worlmap=read_sf("~/2024-1/ASIE/ASIE_2024-1/data_TA2/maps/worldMap.gpkg")
sf::st_layers(worldMap)
sf::st_layers(worldmap)
View(worlmap)
setwd("C:/Users/Carlos Daniel/Documents/2024-1/ASIE/ASIE_2024-1")
library(rio)
library(dplyr)
library(sf)
worldMap=read_sf("C:/Users/Carlos Daniel/Documents/2024-1/ASIE/ASIE_2024-1/data_TA2/maps/worldMap.gpkg")
sf::st_layers(worldMap)
View(worldMap)
worldMap=read_sf("https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA2/maps/worldMap.gpkg")
sf::st_layers(worldMap)
library(rio)
library(dplyr)
library(sf)
worldMap=read_sf("https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA2/maps/worldMap.gpkg")
sf::st_layers(worldMap)
rm(list = ls())
worldMap=read_sf("https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA2/maps/worldMap.gpkg")
sf::st_layers(worldMap)
countries=read_sf(worldMap,layer="countryBorders")
View(worldMap)
worldMap <- st_read("https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA2/maps/worldMap.gpkg")
countries=read_sf(worldMap,layer="countryBorders")
View(worldMap)
View(worldMap[[2]][[1]])
library(ggplot2)
ggplot(worldMap)+geom_sf()
library(plotly)
library(plotly)
map <- ggplotly(
ggplot(data = worldMap) +
theme_light() +
geom_sf(aes(fill = Total_jc5_cat, text = COUNTRY), color = NA) +
scale_fill_viridis_c(option = "D", direction = -1)
)
map <- ggplotly(
ggplot(data = worldMap) +
theme_light() +
geom_sf(aes(text = COUNTRY), color = NA) +
scale_fill_viridis_c(option = "D", direction = -1)
)
library(plotly)
map <- ggplotly(
ggplot(data = worldMap) +
theme_light() +
geom_sf(aes(fill = COUNTRY, text = COUNTRY), color = NA) +
scale_fill_viridis_c(option = "D", direction = -1)
)
rm(list = ls())
library(sf)
linkWorld_gpkg="https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA2/maps/worldMap.gpkg"
sf::st_layers(linkWorld_gpkg)
countries=read_sf(linkWorld_gpkg,layer="countryBorders")
rivers=read_sf(linkWorld_gpkg,layer="riverLines")
cities=read_sf(linkWorld_gpkg,layer="cityPoints")
View(cities)
View(rivers)
library(plotly)
library(magrittr)
baseLayer <- plot_ly() %>%
add_sf(data = countries, fill = I('grey90'), color = I('grey90'))
# Agregar ríos
final <- baseLayer %>%
add_sf(data = rivers, color = I('blue'), inherit = FALSE) %>%
add_sf(data = cities, color = I('red'), inherit = FALSE) %>%
layout(
title = 'Mapa interactivo',
xaxis = list(title = 'Longitud'),
yaxis = list(title = 'Latitud'),
plot_bgcolor = 'lightgrey'
)
final
library(plotly)
library(magrittr)
baseLayer <- plot_ly() %>%
add_sf(data = countries, fill = I('grey90'), color = I('grey90'))
# Agregar ríos
final <- baseLayer %>%
add_sf(data = rivers, color = I('blue'), inherit = FALSE) %>%
add_sf(data = cities, color = I('red'), inherit = FALSE) %>%
layout(
title = 'Mapa interactivo',
xaxis = list(title = 'Longitud'),
yaxis = list(title = 'Latitud'),
plot_bgcolor = 'black'
)
final
library(plotly)
library(magrittr)
baseLayer <- plot_ly() %>%
add_sf(data = countries, fill = I('grey90'), color = I('black'))
# Agregar ríos
final <- baseLayer %>%
add_sf(data = rivers, color = I('blue'), inherit = FALSE) %>%
add_sf(data = cities, color = I('red'), inherit = FALSE) %>%
layout(
title = 'Mapa interactivo',
xaxis = list(title = 'Longitud'),
yaxis = list(title = 'Latitud'),
plot_bgcolor = 'lightgrey'
)
final
library(plotly)
library(sf)
# Asumimos que 'countries', 'rivers' y 'cities' son objetos sf
# y que contienen columnas 'name' para los nombres de los países, ríos y ciudades
# Crear el mapa base con fronteras negras
baseLayer <- plot_ly() %>%
add_sf(data = countries, fill = I('grey90'), color = I('black'), name = 'Countries', text = ~name, hoverinfo = 'text')
# Agregar ríos y ciudades con nombres en la leyenda y texto de hover
final <- baseLayer %>%
add_sf(data = rivers, color = I('blue'), name = 'Rivers', text = ~name, hoverinfo = 'text', inherit = FALSE) %>%
add_sf(data = cities, color = I('red'), name = 'Cities', text = ~name, hoverinfo = 'text', inherit = FALSE) %>%
layout(
title = 'Mapa interactivo',
xaxis = list(title = 'Longitud'),
yaxis = list(title = 'Latitud'),
plot_bgcolor = 'lightgrey'
)
final
library(plotly)
library(sf)
# Asumimos que 'countries', 'rivers' y 'cities' son objetos sf
# y que contienen columnas 'name' para los nombres de los países, ríos y ciudades
# Crear el mapa base con fronteras negras
baseLayer <- plot_ly() %>%
add_sf(data = countries, fill = I('grey90'), color = I('black'), name = 'Countries', text = NAME, hoverinfo = 'text')
library(plotly)
library(sf)
# Asumimos que 'countries', 'rivers' y 'cities' son objetos sf
# y que contienen columnas 'name' para los nombres de los países, ríos y ciudades
# Crear el mapa base con fronteras negras
baseLayer <- plot_ly() %>%
add_sf(data = countries, fill = I('grey90'), color = I('black'), name = 'Countries', text = COUNTRY, hoverinfo = 'text')
library(plotly)
library(sf)
baseLayer <- plot_ly() %>%
add_sf(data = countries, fill = I('grey90'), color = I('black'), name = 'Countries', text = ~COUNTRY, hoverinfo = 'text')
final <- baseLayer %>%
add_sf(data = rivers, color = I('blue'), name = 'Rivers', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
add_sf(data = cities, color = I('red'), name = 'Cities', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
layout(
title = 'Mapa interactivo',
xaxis = list(title = 'Longitud'),
yaxis = list(title = 'Latitud'),
plot_bgcolor = 'lightgrey'
)
final
rm(list = ls())
library(sf)
peru_gpkg="https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA2/maps/peru.gpkg"
sf::st_layers(peru_gpkg)
peru=read_sf(peru_gpkg,layer="border")
rm(list = ls())
library(sf)
linkWorld_gpkg="https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA2/maps/worldMap.gpkg"
sf::st_layers(linkWorld_gpkg)
countries=read_sf(linkWorld_gpkg,layer="countryBorders")
rivers=read_sf(linkWorld_gpkg,layer="riverLines")
cities=read_sf(linkWorld_gpkg,layer="cityPoints")
library(plotly)
baseLayer <- plot_ly() %>%
add_sf(data = countries, fill = I('grey90'), color = I('black'), name = 'Countries', text = ~COUNTRY, hoverinfo = 'text')
final <- baseLayer %>%
add_sf(data = rivers, color = I('blue'), name = 'Rivers', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
add_sf(data = cities, color = I('red'), name = 'Cities', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
layout(
title = 'Mapa interactivo',
xaxis = list(title = 'Longitud'),
yaxis = list(title = 'Latitud'),
plot_bgcolor = 'lightgrey'
)
final
rm(list = ls())
library(sf)
peru_gpkg="https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA2/maps/peru.gpkg"
sf::st_layers(peru_gpkg)
library(sf)
peru=read_sf(peru_gpkg,layer="countryBorders")
peru_rivers=read_sf(peru_gpkg,layer="riverLines")
peru_cities=read_sf(peru_gpkg,layer="cityPoints")
rm(list = ls())
library(sf)
linkWorld_gpkg="https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA2/maps/worldMap.gpkg"
sf::st_layers(linkWorld_gpkg)
countries=read_sf(linkWorld_gpkg,layer="countryBorders")
rivers=read_sf(linkWorld_gpkg,layer="riverLines")
cities=read_sf(linkWorld_gpkg,layer="cityPoints")
library(plotly)
baseLayer <- plot_ly() %>%
add_sf(data = countries, fill = I('grey90'), color = I('black'), name = 'Countries', text = ~COUNTRY, hoverinfo = 'text')
final <- baseLayer %>%
add_sf(data = rivers, color = I('blue'), name = 'Rivers', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
add_sf(data = cities, color = I('red'), name = 'Cities', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
layout(
title = 'Mapa interactivo',
xaxis = list(title = 'Longitud'),
yaxis = list(title = 'Latitud'),
plot_bgcolor = 'lightgrey'
)
final
rm(list = ls())
library(sf)
peru_gpkg="https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA2/maps/peru.gpkg"
sf::st_layers(peru_gpkg)
library(sf)
peru=read_sf(peru_gpkg,layer="countryBorders")
library(sf)
peru=read_sf(peru_gpkg,layer="peruBorders")
peru_rivers=read_sf(peru_gpkg,layer="peruRivers")
peru_cities=read_sf(peru_gpkg,layer="peruCities")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(sf)
linkWorld_gpkg="https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA2/maps/worldMap.gpkg"
sf::st_layers(linkWorld_gpkg)
countries=read_sf(linkWorld_gpkg,layer="countryBorders")
rivers=read_sf(linkWorld_gpkg,layer="riverLines")
cities=read_sf(linkWorld_gpkg,layer="cityPoints")
library(plotly)
baseLayer <- plot_ly() %>%
add_sf(data = countries, fill = I('grey90'), color = I('black'), name = 'Countries', text = ~COUNTRY, hoverinfo = 'text')
final <- baseLayer %>%
add_sf(data = rivers, color = I('blue'), name = 'Rivers', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
add_sf(data = cities, color = I('red'), name = 'Cities', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
layout(
title = 'Mapa interactivo',
xaxis = list(title = 'Longitud'),
yaxis = list(title = 'Latitud'),
plot_bgcolor = 'lightgrey'
)
final
library(sf)
peru_gpkg="https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA2/maps/peru.gpkg"
sf::st_layers(peru_gpkg)
library(sf)
peru=read_sf(peru_gpkg,layer="peruBorders")
peru_rivers=read_sf(peru_gpkg,layer="peruRivers")
peru_cities=read_sf(peru_gpkg,layer="peruCities")
basePeru <- plot_ly() %>%
add_sf(data = peru, fill = I('grey90'), color = I('black'), name = 'Countries', text = ~COUNTRY, hoverinfo = 'text')
peruMap <- basePeru %>%
add_sf(data = peru_rivers, color = I('blue'), name = 'Rivers', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
add_sf(data = peru_cities, color = I('red'), name = 'Cities', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
layout(
title = 'Mapa interactivo',
xaxis = list(title = 'Longitud'),
yaxis = list(title = 'Latitud'),
plot_bgcolor = 'lightgrey'
)
peruMap
link_rpy_gpkg="https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA2/maps/peruMaps_5641.gpkg"
sf::st_layers(link_rpy_gpkg)
link_rpy_gpkg="https://github.com/SocialAnalytics-StrategicIntelligence/GeoDFBasics_py/raw/main/maps/peruMap_5389.gpkg"
sf::st_layers(link_rpy_gpkg)
peru_rep=read_sf(linkPeru_rp_gpkg,layer="border")
peru_rep=read_sf(link_rpy_gpkg,layer="border")
peru_rivers_rep=read_sf(link_rpy_gpkg,layer="rivers")
peru_cities_rep=read_sf(link_rpy_gpkg,layer="cities")
peru_airports=read_sf(link_rpy_gpkg,layer="airports")
base_PE_aeropuertos <- plot_ly() %>%
add_sf(data = peru_rep, fill = I('grey90'), color = I('black'), name = 'Countries', text = ~COUNTRY, hoverinfo = 'text')
peruMap_air <- base_PE_aeropuertos %>%
add_sf(data = peru_rivers_rep, color = I('blue'), name = 'Rivers', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
add_sf(data = peru_cities_rep, color = I('red'), name = 'Cities', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
add_sf(data = peru_airports, color = I('green'), name = 'Airports', text = ~name, hoverinfo = 'text', inherit = FALSE) %>%
layout(
title = 'Mapa interactivo',
xaxis = list(title = 'Longitud'),
yaxis = list(title = 'Latitud'),
plot_bgcolor = 'lightgrey'
)
peruMap
base_PE_aeropuertos <- plot_ly() %>%
add_sf(data = peru_rep, fill = I('grey90'), color = I('black'), name = 'Countries', text = ~COUNTRY, hoverinfo = 'text')
peruMap_air <- base_PE_aeropuertos %>%
add_sf(data = peru_rivers_rep, color = I('blue'), name = 'Rivers', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
add_sf(data = peru_cities_rep, color = I('red'), name = 'Cities', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
add_sf(data = peru_airports, color = I('green'), name = 'Airports', text = ~name, hoverinfo = 'text', inherit = FALSE) %>%
layout(
title = 'Mapa interactivo',
xaxis = list(title = 'Longitud'),
yaxis = list(title = 'Latitud'),
plot_bgcolor = 'lightgrey'
)
peruMap_air
base_PE_aeropuertos <- plot_ly() %>%
add_sf(data = peru_rep, fill = I('grey90'), color = I('black'), name = 'Countries', text = ~COUNTRY, hoverinfo = 'text')
peruMap_air <- base_PE_aeropuertos %>%
add_sf(data = peru_rivers_rep, color = I('blue'), name = 'Rivers', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
add_markers(data = peru_cities_rep, color = I('red'), name = 'Cities', text = ~NAME, hoverinfo = 'text', size = I (10) inherit = FALSE) %>%
base_PE_aeropuertos <- plot_ly() %>%
add_sf(data = peru_rep, fill = I('grey90'), color = I('black'), name = 'Countries', text = ~COUNTRY, hoverinfo = 'text')
peruMap_air <- base_PE_aeropuertos %>%
add_sf(data = peru_rivers_rep, color = I('blue'), name = 'Rivers', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
add_sf(data = peru_cities_rep, color = I('red'), name = 'Cities', text = ~NAME, hoverinfo = 'text', inherit = FALSE) %>%
add_sf(data = peru_airports, color = I('green'), name = 'Airports', text = ~name, hoverinfo = 'text', inherit = FALSE) %>%
layout(
title = 'Mapa interactivo',
xaxis = list(title = 'Longitud'),
yaxis = list(title = 'Latitud'),
plot_bgcolor = 'lightgrey'
)
peruMap_air
library(sf)
america_gpkg="https://github.com/krlos20203563/ASIE_2024-1/raw/main/data_TA2/maps/america_frag.gpkg"
sf::st_layers(america_gpkg)
america=read_sf(america_gpkg,layer="fragility")
View(peru_airports)
View(america)
View(america)
centroids <- st_centroid(america)
View(centroids)
View(america)
ggplot(data = america) +
geom_sf() +
geom_sf(data = centroids, aes(color = Total_ei5), size = 3) +
scale_color_viridis_d(name = "Fragility (Total_ei5)") +
theme_minimal() +
labs(title = "Fragility of American Countries (2020)",
caption = "Data source: your data source here")
ggplot(data = america) +
geom_sf() +
geom_sf(data = centroids, aes(color = Total_ei5_cat), size = 3) +
scale_color_viridis_d(name = "Fragility (Total_ei5)") +
theme_minimal() +
labs(title = "Fragility of American Countries (2020)",
caption = "Data source: your data source here")
library(ggplot2)
BaseLayer=ggplot(data=america)  + geom_sf(fill='grey90') + theme_light()
final=BaseLayer + geom_sf(data=centroids,aes(color=Total_ei5_cat),size=2+centroids$Total_ei5) +
guides(size=NULL) +
coord_sf(datum = st_crs(america))
final
ggplot(data = america) +
geom_sf() +
geom_sf(data = centroids, aes(color = Total_ei5_cat), size = 3) +
scale_color_viridis_d(name = "Fragility (Total_ei5)") +
theme_minimal() +
labs(title = "Fragility of American Countries (2020)")
